/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface WorkoutRewardsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateReward"
      | "distanceRewardRate"
      | "gwcToken"
      | "owner"
      | "repsRewardRate"
      | "rewardWorkout"
      | "timeRewardRate"
      | "weightRewardRate"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "WorkoutRewarded"): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distanceRewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gwcToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repsRewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardWorkout",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "timeRewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weightRewardRate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distanceRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gwcToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repsRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardWorkout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weightRewardRate",
    data: BytesLike
  ): Result;
}

export namespace WorkoutRewardedEvent {
  export type InputTuple = [
    user: AddressLike,
    totalReps: BigNumberish,
    totalWeight: BigNumberish,
    totalTime: BigNumberish,
    totalDistance: BigNumberish,
    tokens: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    totalReps: bigint,
    totalWeight: bigint,
    totalTime: bigint,
    totalDistance: bigint,
    tokens: bigint
  ];
  export interface OutputObject {
    user: string;
    totalReps: bigint;
    totalWeight: bigint;
    totalTime: bigint;
    totalDistance: bigint;
    tokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WorkoutRewards extends BaseContract {
  connect(runner?: ContractRunner | null): WorkoutRewards;
  waitForDeployment(): Promise<this>;

  interface: WorkoutRewardsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateReward: TypedContractMethod<
    [
      reps: BigNumberish,
      weight: BigNumberish,
      time: BigNumberish,
      distance: BigNumberish
    ],
    [bigint],
    "view"
  >;

  distanceRewardRate: TypedContractMethod<[], [bigint], "view">;

  gwcToken: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  repsRewardRate: TypedContractMethod<[], [bigint], "view">;

  rewardWorkout: TypedContractMethod<
    [
      user: AddressLike,
      reps: BigNumberish,
      weight: BigNumberish,
      time: BigNumberish,
      distance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  timeRewardRate: TypedContractMethod<[], [bigint], "view">;

  weightRewardRate: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateReward"
  ): TypedContractMethod<
    [
      reps: BigNumberish,
      weight: BigNumberish,
      time: BigNumberish,
      distance: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "distanceRewardRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gwcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "repsRewardRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardWorkout"
  ): TypedContractMethod<
    [
      user: AddressLike,
      reps: BigNumberish,
      weight: BigNumberish,
      time: BigNumberish,
      distance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timeRewardRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "weightRewardRate"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "WorkoutRewarded"
  ): TypedContractEvent<
    WorkoutRewardedEvent.InputTuple,
    WorkoutRewardedEvent.OutputTuple,
    WorkoutRewardedEvent.OutputObject
  >;

  filters: {
    "WorkoutRewarded(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      WorkoutRewardedEvent.InputTuple,
      WorkoutRewardedEvent.OutputTuple,
      WorkoutRewardedEvent.OutputObject
    >;
    WorkoutRewarded: TypedContractEvent<
      WorkoutRewardedEvent.InputTuple,
      WorkoutRewardedEvent.OutputTuple,
      WorkoutRewardedEvent.OutputObject
    >;
  };
}
